{"version":3,"sources":["components/Message/Message.js","components/Send/Send.js","components/Users/User.js","components/Chat/Chat.js","index.js"],"names":["Message","_ref","item","react_default","a","createElement","className","user","text","Send","value","onChange","onSend","onSubmit","type","User","users","Object","keys","map","id","key","Chat","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setListeners","socket","io","on","emit","state","currentUser","data","isLogin","addMessage","addUsers","changeMessage","event","setState","inputMsg","target","validName","inputName","div","current","messages","name","message","concat","toConsumableArray","sendMessage","preventDefault","_this$state","trim","length","React","createRef","_this$state2","react","components_Message_Message","components_Send_Send","placeholder","Users_User","ref","defaultValue","onClick","Component","ReactDOM","render","components_Chat_Chat","document","getElementById"],"mappings":"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","file":"static/js/main.9816eb8b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Message.css';\r\n\r\nconst Message = ({ item }) => (\r\n  <div className=\"message-container\">\r\n    <span className=\"message\">{item.user}</span>\r\n    <span className=\"message end\">{item.text}</span>\r\n  </div>\r\n);\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport './Send.css';\r\n\r\nconst Send = ({ value, onChange, onSend }) => (\r\n  <form onSubmit={onSend} className=\"send-block\">\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n      className=\"input-message\"\r\n    />\r\n    <button type=\"submit\" className=\"send\">\r\n      Send\r\n    </button>\r\n  </form>\r\n);\r\n\r\nexport default Send;\r\n","import React from 'react';\r\n\r\nconst User = ({ users }) => (\r\n  <ul>\r\n    {Object.keys(users).map(id => (\r\n      <li key={id}>{users[id]}</li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default User;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Message from '../Message';\r\nimport Send from '../Send';\r\nimport User from '../Users';\r\nimport io from 'socket.io-client';\r\nimport './Chat.css';\r\n\r\nclass Chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.div = React.createRef();\r\n    this.state = {\r\n      currentUser: 'Anonimus',\r\n      messages: [{ user: 'Owl', text: 'test' }],\r\n      inputMsg: '',\r\n      isLogin: false,\r\n      users: {},\r\n    };\r\n    this.socket = null;\r\n  }\r\n\r\n  setListeners = () => {\r\n    this.socket = io('https://beetchat.herokuapp.com/');\r\n    this.socket.on('connect', () => {\r\n      this.socket.emit('addUser', this.state.currentUser);\r\n    });\r\n    this.socket.on('message', data => {\r\n      if (this.state.isLogin) this.addMessage(data);\r\n    });\r\n    this.socket.on('updateUsers', data => {\r\n      if (this.state.isLogin) this.addUsers(data);\r\n    });\r\n  };\r\n\r\n  changeMessage = event => {\r\n    this.setState({\r\n      inputMsg: event.target.value,\r\n    });\r\n  };\r\n\r\n  validName = user => {\r\n    return user !== '' && user !== 'Anonimus';\r\n  };\r\n\r\n  inputName = () => {\r\n    const user = this.div.current.value;\r\n    if (this.validName(user)) {\r\n      this.setState({\r\n        currentUser: user,\r\n        isLogin: true,\r\n      });\r\n      this.setListeners();\r\n    }\r\n  };\r\n\r\n  addMessage = data => {\r\n    this.setState(({ messages }) => ({\r\n      inputMsg: '',\r\n      messages: [{ user: data.name, text: data.message }, ...messages],\r\n    }));\r\n  };\r\n\r\n  addUsers = data => {\r\n    this.setState({ users: data });\r\n  };\r\n\r\n  sendMessage = event => {\r\n    event.preventDefault();\r\n    const { currentUser, inputMsg } = this.state;\r\n    if (inputMsg.trim().length) {\r\n      this.socket.emit('message', { name: currentUser, message: inputMsg });\r\n      this.setState({ inputMsg: '' });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { messages, inputMsg, currentUser, isLogin, users } = this.state;\r\n    if (!isLogin) {\r\n      return (\r\n        <div className=\"login\">\r\n          <span>Welcome</span>\r\n          <input ref={this.div} defaultValue={currentUser} />\r\n          <button onClick={this.inputName}>Ok</button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <Fragment>\r\n        <div className=\"chat\">\r\n          <div className=\"message-list\">\r\n            <div className=\"messages\">\r\n              {messages.map((item, key) => (\r\n                <Message item={item} key={key} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <Send\r\n            value={inputMsg}\r\n            placeholder=\"write something...\"\r\n            onChange={this.changeMessage}\r\n            onSend={this.sendMessage}\r\n          />\r\n        </div>\r\n        <User users={users} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Chat from './components/Chat';\n\nReactDOM.render(<Chat />, document.getElementById('root'));\n"],"sourceRoot":""}